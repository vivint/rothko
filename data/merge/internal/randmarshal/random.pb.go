// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: random.proto

/*
	Package randmarshal is a generated protocol buffer package.

	It is generated from these files:
		random.proto

	It has these top-level messages:
		Buffer
		FinishedRandom
*/
package randmarshal

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Buffer describes a list of values assicated with some weight and if they
// are sorted.
type Buffer struct {
	Data   []float64 `protobuf:"fixed64,1,rep,packed,name=data" json:"data,omitempty"`
	Level  int32     `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Sorted bool      `protobuf:"varint,3,opt,name=sorted,proto3" json:"sorted,omitempty"`
}

func (m *Buffer) Reset()                    { *m = Buffer{} }
func (m *Buffer) String() string            { return proto.CompactTextString(m) }
func (*Buffer) ProtoMessage()               {}
func (*Buffer) Descriptor() ([]byte, []int) { return fileDescriptorRandom, []int{0} }

// FinishedRandom describes a random percentile estimator
type FinishedRandom struct {
	E       float64  `protobuf:"fixed64,1,opt,name=e,proto3" json:"e,omitempty"`
	N       int64    `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	Buffers []Buffer `protobuf:"bytes,3,rep,name=buffers" json:"buffers"`
}

func (m *FinishedRandom) Reset()                    { *m = FinishedRandom{} }
func (m *FinishedRandom) String() string            { return proto.CompactTextString(m) }
func (*FinishedRandom) ProtoMessage()               {}
func (*FinishedRandom) Descriptor() ([]byte, []int) { return fileDescriptorRandom, []int{1} }

func init() {
	proto.RegisterType((*Buffer)(nil), "sm.rothko.data.merge.internal.randmarshal.Buffer")
	proto.RegisterType((*FinishedRandom)(nil), "sm.rothko.data.merge.internal.randmarshal.FinishedRandom")
}
func (m *Buffer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Buffer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRandom(dAtA, i, uint64(len(m.Data)*8))
		for _, num := range m.Data {
			f1 := math.Float64bits(float64(num))
			dAtA[i] = uint8(f1)
			i++
			dAtA[i] = uint8(f1 >> 8)
			i++
			dAtA[i] = uint8(f1 >> 16)
			i++
			dAtA[i] = uint8(f1 >> 24)
			i++
			dAtA[i] = uint8(f1 >> 32)
			i++
			dAtA[i] = uint8(f1 >> 40)
			i++
			dAtA[i] = uint8(f1 >> 48)
			i++
			dAtA[i] = uint8(f1 >> 56)
			i++
		}
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRandom(dAtA, i, uint64(m.Level))
	}
	if m.Sorted {
		dAtA[i] = 0x18
		i++
		if m.Sorted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *FinishedRandom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinishedRandom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.E != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Random(dAtA, i, uint64(math.Float64bits(float64(m.E))))
	}
	if m.N != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRandom(dAtA, i, uint64(m.N))
	}
	if len(m.Buffers) > 0 {
		for _, msg := range m.Buffers {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRandom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Random(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Random(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRandom(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Buffer) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		n += 1 + sovRandom(uint64(len(m.Data)*8)) + len(m.Data)*8
	}
	if m.Level != 0 {
		n += 1 + sovRandom(uint64(m.Level))
	}
	if m.Sorted {
		n += 2
	}
	return n
}

func (m *FinishedRandom) Size() (n int) {
	var l int
	_ = l
	if m.E != 0 {
		n += 9
	}
	if m.N != 0 {
		n += 1 + sovRandom(uint64(m.N))
	}
	if len(m.Buffers) > 0 {
		for _, e := range m.Buffers {
			l = e.Size()
			n += 1 + l + sovRandom(uint64(l))
		}
	}
	return n
}

func sovRandom(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRandom(x uint64) (n int) {
	return sovRandom(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Buffer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Buffer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Buffer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				v = uint64(dAtA[iNdEx-8])
				v |= uint64(dAtA[iNdEx-7]) << 8
				v |= uint64(dAtA[iNdEx-6]) << 16
				v |= uint64(dAtA[iNdEx-5]) << 24
				v |= uint64(dAtA[iNdEx-4]) << 32
				v |= uint64(dAtA[iNdEx-3]) << 40
				v |= uint64(dAtA[iNdEx-2]) << 48
				v |= uint64(dAtA[iNdEx-1]) << 56
				v2 := float64(math.Float64frombits(v))
				m.Data = append(m.Data, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRandom
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRandom
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 8
					v = uint64(dAtA[iNdEx-8])
					v |= uint64(dAtA[iNdEx-7]) << 8
					v |= uint64(dAtA[iNdEx-6]) << 16
					v |= uint64(dAtA[iNdEx-5]) << 24
					v |= uint64(dAtA[iNdEx-4]) << 32
					v |= uint64(dAtA[iNdEx-3]) << 40
					v |= uint64(dAtA[iNdEx-2]) << 48
					v |= uint64(dAtA[iNdEx-1]) << 56
					v2 := float64(math.Float64frombits(v))
					m.Data = append(m.Data, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sorted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sorted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRandom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRandom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinishedRandom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinishedRandom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinishedRandom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.E = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRandom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buffers = append(m.Buffers, Buffer{})
			if err := m.Buffers[len(m.Buffers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRandom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRandom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRandom(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRandom
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRandom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRandom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRandom
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRandom
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRandom(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRandom = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRandom   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("random.proto", fileDescriptorRandom) }

var fileDescriptorRandom = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8f, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x7b, 0x49, 0x5b, 0x90, 0x5b, 0x31, 0x58, 0x08, 0x45, 0x48, 0x04, 0xab, 0x93, 0x19,
	0x70, 0x05, 0xbc, 0x41, 0x06, 0x06, 0x36, 0x3c, 0xb2, 0x39, 0xe4, 0xe6, 0x47, 0xc4, 0x36, 0xb2,
	0x1d, 0x56, 0x5e, 0x2f, 0x23, 0x4f, 0x80, 0x20, 0x4f, 0x82, 0xe2, 0x80, 0xc4, 0xc8, 0x76, 0x3e,
	0xc9, 0xfe, 0xee, 0x39, 0x64, 0xeb, 0x94, 0x29, 0xad, 0x16, 0x2f, 0xce, 0x06, 0x4b, 0x2f, 0xbd,
	0x16, 0xce, 0x86, 0xe6, 0xd9, 0x8a, 0x52, 0x05, 0x25, 0x34, 0xba, 0x1a, 0x45, 0x6b, 0x02, 0x3a,
	0xa3, 0x3a, 0x31, 0xbd, 0xd5, 0xca, 0xf9, 0x46, 0x75, 0x67, 0x57, 0x75, 0x1b, 0x9a, 0xbe, 0x10,
	0x4f, 0x56, 0xef, 0x6b, 0x5b, 0xdb, 0x7d, 0x34, 0x14, 0x7d, 0x15, 0x29, 0x42, 0x4c, 0xb3, 0x79,
	0x77, 0x4f, 0xd6, 0x79, 0x5f, 0x55, 0xe8, 0x28, 0x25, 0xcb, 0xc9, 0x9d, 0x02, 0x4b, 0x38, 0xc8,
	0x98, 0xe9, 0x09, 0x59, 0x75, 0xf8, 0x8a, 0x5d, 0x7a, 0xc0, 0x80, 0xaf, 0xe4, 0x0c, 0xf4, 0x94,
	0xac, 0xbd, 0x75, 0x01, 0xcb, 0x34, 0x61, 0xc0, 0x8f, 0xe4, 0x0f, 0xed, 0xde, 0xc8, 0xf1, 0x5d,
	0x6b, 0x5a, 0xdf, 0x60, 0x29, 0x63, 0x7b, 0xba, 0x25, 0x80, 0x29, 0x30, 0xe0, 0x20, 0x01, 0x27,
	0x32, 0xd1, 0x94, 0x48, 0x30, 0xf4, 0x81, 0x1c, 0x16, 0xf1, 0xb2, 0x4f, 0x13, 0x96, 0xf0, 0xcd,
	0xcd, 0xb5, 0xf8, 0xf7, 0x4a, 0x31, 0x77, 0xce, 0x97, 0xc3, 0xc7, 0xc5, 0x42, 0xfe, 0x7a, 0xf2,
	0xf3, 0xe1, 0x2b, 0x5b, 0x0c, 0x63, 0x06, 0xef, 0x63, 0x06, 0x9f, 0x63, 0x06, 0x8f, 0x9b, 0x3f,
	0x9f, 0x8a, 0x75, 0x9c, 0x7c, 0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xa5, 0x94, 0x78, 0x5c,
	0x01, 0x00, 0x00,
}
