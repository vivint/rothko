// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: data.proto

/*
	Package data is a generated protocol buffer package.

	It is generated from these files:
		data.proto

	It has these top-level messages:
		Record
*/
package data

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Kind is the kind of the distribution.
type Kind int32

const (
	Kind_Unknown Kind = 0
	Kind_TDigest Kind = 1
)

var Kind_name = map[int32]string{
	0: "Unknown",
	1: "TDigest",
}
var Kind_value = map[string]int32{
	"Unknown": 0,
	"TDigest": 1,
}

func (x Kind) String() string {
	return proto.EnumName(Kind_name, int32(x))
}
func (Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptorData, []int{0} }

// Record is an observed distribution over some time period with some
// additional data about observed minimums and maximums.
type Record struct {
	// start and end time in seconds since unix epoch utc
	StartTime int64 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// the number of observations in the distribution
	Observations int64 `protobuf:"varint,3,opt,name=observations,proto3" json:"observations,omitempty"`
	// a serialized distribution. the kind tells us which type of distribution
	// it is.
	Distribution []byte `protobuf:"bytes,4,opt,name=distribution,proto3" json:"distribution,omitempty"`
	Kind         Kind   `protobuf:"varint,5,opt,name=kind,proto3,enum=sm.rothko.data.Kind" json:"kind,omitempty"`
	// minimum and maximum values observed
	Min   float64 `protobuf:"fixed64,6,opt,name=min,proto3" json:"min,omitempty"`
	Max   float64 `protobuf:"fixed64,7,opt,name=max,proto3" json:"max,omitempty"`
	MinId []byte  `protobuf:"bytes,8,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	MaxId []byte  `protobuf:"bytes,9,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	// how many records have been merged into this.
	Merged int64 `protobuf:"varint,10,opt,name=merged,proto3" json:"merged,omitempty"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{0} }

func init() {
	proto.RegisterType((*Record)(nil), "sm.rothko.data.Record")
	proto.RegisterEnum("sm.rothko.data.Kind", Kind_name, Kind_value)
}
func (m *Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintData(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintData(dAtA, i, uint64(m.EndTime))
	}
	if m.Observations != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Observations))
	}
	if len(m.Distribution) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Distribution)))
		i += copy(dAtA[i:], m.Distribution)
	}
	if m.Kind != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Kind))
	}
	if m.Min != 0 {
		dAtA[i] = 0x31
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Min))))
		i += 8
	}
	if m.Max != 0 {
		dAtA[i] = 0x39
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Max))))
		i += 8
	}
	if len(m.MinId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.MinId)))
		i += copy(dAtA[i:], m.MinId)
	}
	if len(m.MaxId) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.MaxId)))
		i += copy(dAtA[i:], m.MaxId)
	}
	if m.Merged != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Merged))
	}
	return i, nil
}

func encodeVarintData(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Record) Size() (n int) {
	var l int
	_ = l
	if m.StartTime != 0 {
		n += 1 + sovData(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovData(uint64(m.EndTime))
	}
	if m.Observations != 0 {
		n += 1 + sovData(uint64(m.Observations))
	}
	l = len(m.Distribution)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.Kind != 0 {
		n += 1 + sovData(uint64(m.Kind))
	}
	if m.Min != 0 {
		n += 9
	}
	if m.Max != 0 {
		n += 9
	}
	l = len(m.MinId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.MaxId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.Merged != 0 {
		n += 1 + sovData(uint64(m.Merged))
	}
	return n
}

func sovData(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozData(x uint64) (n int) {
	return sovData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Observations", wireType)
			}
			m.Observations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Observations |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distribution", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Distribution = append(m.Distribution[:0], dAtA[iNdEx:postIndex]...)
			if m.Distribution == nil {
				m.Distribution = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (Kind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Min = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Max = float64(math.Float64frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinId = append(m.MinId[:0], dAtA[iNdEx:postIndex]...)
			if m.MinId == nil {
				m.MinId = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxId = append(m.MaxId[:0], dAtA[iNdEx:postIndex]...)
			if m.MaxId == nil {
				m.MaxId = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merged", wireType)
			}
			m.Merged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Merged |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthData
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowData
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipData(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthData = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowData   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("data.proto", fileDescriptorData) }

var fileDescriptorData = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x41, 0x4e, 0x02, 0x31,
	0x14, 0x86, 0x29, 0x0c, 0x03, 0x3c, 0x09, 0x21, 0x8d, 0x92, 0x6a, 0xe2, 0x64, 0xc2, 0x6a, 0x62,
	0xe2, 0x90, 0xe8, 0x0d, 0x8c, 0x1b, 0xe2, 0x6e, 0x82, 0x1b, 0x37, 0xa4, 0x43, 0xeb, 0xd0, 0x90,
	0xb6, 0xa6, 0x53, 0x74, 0x4e, 0xe3, 0x79, 0x58, 0x7a, 0x04, 0xe5, 0x24, 0xa6, 0x0f, 0x36, 0xb3,
	0x7b, 0xff, 0xf7, 0xff, 0xcd, 0xfb, 0xfb, 0x00, 0x04, 0xf7, 0x3c, 0xff, 0x70, 0xd6, 0x5b, 0x3a,
	0xa9, 0x75, 0xee, 0xac, 0xdf, 0xee, 0x6c, 0x1e, 0xe8, 0xcd, 0x7d, 0xa5, 0xfc, 0x76, 0x5f, 0xe6,
	0x1b, 0xab, 0x17, 0x95, 0xad, 0xec, 0x02, 0x63, 0xe5, 0xfe, 0x1d, 0x15, 0x0a, 0x9c, 0x4e, 0xcf,
	0xe7, 0xdf, 0x5d, 0x88, 0x0b, 0xb9, 0xb1, 0x4e, 0xd0, 0x5b, 0x80, 0xda, 0x73, 0xe7, 0xd7, 0x5e,
	0x69, 0xc9, 0x48, 0x4a, 0xb2, 0x5e, 0x31, 0x42, 0xb2, 0x52, 0x5a, 0xd2, 0x6b, 0x18, 0x4a, 0x23,
	0x4e, 0x66, 0x17, 0xcd, 0x81, 0x34, 0x02, 0xad, 0x39, 0x8c, 0x6d, 0x59, 0x4b, 0xf7, 0xc9, 0xbd,
	0xb2, 0xa6, 0x66, 0x3d, 0xb4, 0x5b, 0x2c, 0x64, 0x84, 0xaa, 0xbd, 0x53, 0xe5, 0x3e, 0x00, 0x16,
	0xa5, 0x24, 0x1b, 0x17, 0x2d, 0x46, 0x33, 0x88, 0x76, 0xca, 0x08, 0xd6, 0x4f, 0x49, 0x36, 0x79,
	0xb8, 0xcc, 0xdb, 0x5f, 0xcb, 0x5f, 0x94, 0x11, 0x05, 0x26, 0xe8, 0x14, 0x7a, 0x5a, 0x19, 0x16,
	0xa7, 0x24, 0x23, 0x45, 0x18, 0x91, 0xf0, 0x86, 0x0d, 0xce, 0x84, 0x37, 0xf4, 0x0a, 0x62, 0xad,
	0xcc, 0x5a, 0x09, 0x36, 0xc4, 0x5d, 0x7d, 0xad, 0xcc, 0x52, 0x20, 0xe6, 0x4d, 0xc0, 0xa3, 0x33,
	0xe6, 0xcd, 0x52, 0xd0, 0x19, 0xc4, 0x5a, 0xba, 0x4a, 0x0a, 0x06, 0xd8, 0xfe, 0xac, 0xee, 0x52,
	0x88, 0xc2, 0x5e, 0x7a, 0x01, 0x83, 0x57, 0xb3, 0x33, 0xf6, 0xcb, 0x4c, 0x3b, 0x41, 0xac, 0x9e,
	0x55, 0x25, 0x6b, 0x3f, 0x25, 0x4f, 0xb3, 0xc3, 0x5f, 0xd2, 0x39, 0x1c, 0x13, 0xf2, 0x73, 0x4c,
	0xc8, 0xef, 0x31, 0x21, 0x6f, 0x51, 0xa8, 0x5b, 0xc6, 0x78, 0xe1, 0xc7, 0xff, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x5d, 0xe5, 0x3f, 0x4d, 0xae, 0x01, 0x00, 0x00,
}
