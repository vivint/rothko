#!/usr/bin/env bash

set -e

if [ ! -z "$ROTH_USAGE" ]; then
	echo "generates all the code/documentation"
	exit 0
fi

SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "${SCRIPTDIR}/.."
cd "$(pwd -P)"

log() {
	echo "---" "$@"
}

# determine which sed to use
SED="sed"
case "$(uname)" in
	"Darwin" )
		SED="gsed"
		;;
esac

if ! command -v "${SED}" >/dev/null 2>&1; then
	echo "${SED} not found. install it to continue."
	exit 1
fi

# put the godocdown template in a temporary directory
TEMPLATE=$(mktemp)
trap 'rm ${TEMPLATE}' EXIT

cat <<EOF >"${TEMPLATE}"
# package {{ .Name }}

\`import "{{ .ImportPath }}"\`

{{ .EmitSynopsis }}

{{ .EmitUsage }}
EOF

# build the godocdown tool
IMPORT=github.com/robertkrimen/godocdown/godocdown
GODOCDOWN=$(go list -f '{{ .Target }}' "${IMPORT}")
go install -v "${IMPORT}"

# build the protoc-gen-gogo tool
IMPORT=github.com/gogo/protobuf/protoc-gen-gogo
INCLUDE=$(dirname "$(go list -f '{{ .Dir }}' "${IMPORT}")")
PROTOC_GEN_GOGO=$(go list -f '{{ .Target }}' "${IMPORT}")
go install -v $IMPORT

# generates the ui elm code and put it in a tarball
ui() {(
	cd ui

	ELM="$(npm prefix)/node_modules/.bin/elm"

	if [ ! -f "$ELM" ]; then
		echo "elm not found. try running:"
		echo "	roth onboard"
		echo "and then this command again."
		exit 1
	fi

	log "building elm code..."
	"${ELM}" package install
	if [ -n "$LIVE" ]; then
		"${ELM}" make src/Main.elm --output site/js/main.js --debug
	else
		"${ELM}" make src/Main.elm --output site/js/main.js
	fi

	log "creating ui tarball..."
	tar czf ui.tgz -C site .

	log "creating ui go source..."

	cat <<- EOF > ui.go
	// Copyright (C) 2018. See AUTHORS.

	// Autogenerated by roth deploy; DO NOT EDIT.

	package ui

	func init() {
		Tarball = []byte{
	EOF

	xxd -ps ui.tgz \
		| "${SED}" -e 's/\(..\)/0x\1, /g' \
		| "${SED}" -e 's/^\(.*\) $/		\1/g' \
		>> ui.go

	cat <<- EOF >> ui.go
		}
	}
	EOF
)}

# generates protobufs in a package
proto() {
	PACKAGE="$1"
	DIR="$2"

	if ! compgen -G "${DIR}/*.proto" >/dev/null; then
		return 0
	fi

	# generate
	log "generating protobufs for ${PACKAGE}..."
	protoc \
		--plugin=protoc-gen-gogo="${PROTOC_GEN_GOGO}" \
		-I"${INCLUDE}" \
		-I"${DIR}" \
		--gogo_out="${DIR}" \
		"${DIR}"/*.proto

	# strip out the proto imports because we don't need them and they're silly.
	# we want protobuf as a serialization format, not some api runtime
	# reflection, generic registry whackdoodlery.
	"${SED}" -i '/^import proto/d'   -- "${DIR}"/*.pb.go
	"${SED}" -i '/gogoproto/d'       -- "${DIR}"/*.pb.go
	"${SED}" -i '/\tXXX/d'           -- "${DIR}"/*.pb.go
	"${SED}" -i '/XXX/,/^}/d'        -- "${DIR}"/*.pb.go
	"${SED}" -i '/proto\./d'         -- "${DIR}"/*.pb.go
	"${SED}" -i '/ProtoMessage/d'    -- "${DIR}"/*.pb.go
	"${SED}" -i '/Descriptor/,/^}/d' -- "${DIR}"/*.pb.go
	go fmt "${DIR}"/*.pb.go > /dev/null
}

# generates docs for a package
docs() {
	PACKAGE="$1"
	DIR="$2"

	case "${PACKAGE}" in
		"github.com/vivint/rothko" )
			return
			;;
	esac

	# generate
	log "generating docs for ${PACKAGE}..."
	"${GODOCDOWN}" -template "${TEMPLATE}" "${DIR}" > "${DIR}/README.md"

	# because we used the dir rather than the package (for vgo reasons), we
	# need to fix up the import line
	"${SED}" -i "s#import \"\.\"#import \"$PACKAGE\"#g" -- "${DIR}/README.md"
}

# generate all the packages
PACKAGES=$(go list -f '{{ .ImportPath }}|{{ .Dir }}' github.com/vivint/rothko/...)
for DESC in ${PACKAGES}; do
	PACKAGE="$(echo "${DESC}" | cut -d '|' -f 1)"
	DIR="$(echo "${DESC}" | cut -d '|' -f 2)"

	proto "${PACKAGE}" "${DIR}"
	docs  "${PACKAGE}" "${DIR}"
done

# do the ui last in case people don't care about elm
ui
